print(d)
airquality
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(shiny)
install.packages("shiny")
library(shiny)
install.packages("htmlwidgets")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$newHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mean
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('myHist')
)
))
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$distPlot <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$newHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$newHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$newHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mean
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$newHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05)
),
mainPanel(
plotOutput('newHist')
)
))
galton$child
?colSums
?dgamma
?lm
?predict
?lm
?colSums
?lm
?predict
?dgamma
library(jsonlite)
install.packages(jsonlite)
install.packages("jsonlite")
install.packages("jsonlite")
name <- c("John", "Smith", "Gail", "Tom", "Bob")
order <- c(1, 2, 3, 4, 5)
orderNum <- c(1, 2, 3, 4, 5)
orderData <- data.frame(orderNum, name)
orderData
name
orderNum
name <- c("John", "Smith", "Gail", "Tom", "Bob")
orderNum <- c(1, 2, 3, 4, 5)
orderData <- data.frame(orderNum, name)
orderData
mileage <- c(65311, 65624, 65908, 66219, 66499, 66821, 67145)
diff(mileage)
65311-313
65624-284
?diff()
mileage
mileage <- c(65311, 65624, 65908, 66219, 66499, 66821, 67145)
diff(mileage)
max(mileage)
mean(mileage)
sd(mileage)
min(mileage)
min(diff(mileage))
commuteTime <- c(17,16, 20, 24, 22, 15, 21, 15, 17, 22)
commuteTime[4] = 18
commuteTime
sum(commuteTime > 20)
?diff
x = c(1,3,5,7,9)
x
x+1
y = c(2,3,5,7,11,13)
y
y*2
length(x)
?length
x + y
sum(x>5)
sum(x[x>5])
y[-3]
y[3]
y[x]
y[y>=7]
y[x]
x
y
library(ggplot2)
g <- ggplot(mpg)
str(mpg)
g + geom_point(aes(x=cyl, y=hwy, color=class))
g + geom_point(aes(x=cyl, y=hwy, shape=class))
g + geom_point(aes(x=cyl, y=hwy, color=class))
g + geom_point(aes(x=cyl, y=hwy, color=class, size=5))
p = g + geom_point(aes(x=cyl, y=hwy, color=class))
p1 = p + geom_point(size=5)
p1
p
g + geom_point(aes(x=cyl, y=hwy, color=class, size=5))
g + geom_point(aes(x=cyl, y=hwy, color=class), scale_fill_manual(values=cbPalette), size=5)
g + geom_point(aes(x=cyl, y=hwy, color=class),size=5)
g + geom_point(aes(x=cyl, y=hwy, color=class, scale_fill_manual(values=cbPalette)),size=5)
g + geom_point(aes(x=cyl, y=hwy, color=class),size=5)
g + geom_point(aes(x=cyl, y=hwy), color=class,size=5)
g + geom_point(aes(x=cyl, y=hwy, color=class),size=5)
g + geom_point(aes(x=cyl, y=hwy, color=class),size=5) + scale_fill_manual(values=cbPalette)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
g + geom_point(aes(x=cyl, y=hwy, color=class),size=5) + scale_fill_manual(values=cbPalette)
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
g + geom_point(aes(x=cyl, y=hwy, color=class),size=5) + scale_colour_manual(values=cbPalette)
g + geom_histogram() + facet_grid(~drv)
g + geom_histogram(aes(x=drv)) + facet_grid(~drv)
g + geom_histogram(aes(x=drv))
g + geom_histogram(aes(x=drv, fill=class))
g + geom_histogram(aes(x=drv, fill=class)) + scale_colour_manual(values=cbPalette)
g + geom_histogram(aes(x=drv, fill=class)) + scale_colour_manual(values=cbPalette)
g + geom_histogram(aes(x=drv, fill=class))
g + geom_histogram(aes(x=drv, fill=class)) + geom_bar(stat="identity",position='dodge')
g + geom_histogram(aes(x=drv, fill=class))
g + geom_histogram(aes(x=drv, fill=class), position="dodge")
library(ggplot2)
g <- ggplot(mpg)
g + geom_point(aes(x=cyl, y=cty, color=class),size=5)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
g + geom_point(aes(x=cyl, y=hwy, color=class),size=5) + scale_colour_manual(values=cbPalette)
g + geom_point(aes(x=cyl, y=cty, color=class),size=5) + scale_colour_manual(values=cbPalette)
cty <- g + geom_point(aes(x=cyl, y=cty, color=class),size=5) + scale_colour_manual(values=cbPalette)
hwy <- g + geom_point(aes(x=cyl, y=hwy, color=class),size=5) + scale_colour_manual(values=cbPalette)
multiplot(cty, hwy, cols=2)
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(cty, hwy, cols=2)
multiplot(cty, hwy, cols=1)
multiplot(cty, hwy, cols=2)
cty
hwy
data(iris)subset <- cfs(Species~., iris)f <- as.simple.formula(subset, "Species")print(f)
data(iris)subset <- cfs(Species~., iris)f <- as.simple.formula(subset, "Species")print(f)
data(iris)
subset <- cfs(Species~., iris)
install.packages("FSelector")
library(FSelector)
data(iris)
subset <- cfs(Species~., iris)
f <- as.simple.formula(subset, "Species")
print(f)
str(iris)
read.csv
?read.csv
library(FSelector)
load(mgg)
load(mpg)
library(dataset)
mtcars
mpg
iris
setwd("~/Dropbox/Juan_Mac_backup/Documents/Data_Science_Hackathon_2015/shiny_3")
plotpredict <- function(date, model){
# import packages
library(lubridate)
library(ggplot2)
library(dplyr)
library(randomForest)
# make data frame for test data
# set up the hour column
hour <- c(0:23)
# holidays for 2015
holidayRecord <- c("2015-10-12", "2015-11-11", "2015-11-26", "2015-11-27", "2015-12-25")
# check if is holiday: if yes, holiday=1; if no, holiday=0
holidayRecord <- as.Date(holidayRecord)
if(sum(as.Date(date)==holidayRecord)) {
holiday = rep(1, 24)
} else {
holiday = rep(0, 24)
}
# check what day of week is for the date
wday <- rep(lubridate::wday(date, label=TRUE), 24)
# put the hour, holiday, wday together to generate the test data set
test <- data.frame(hour, holiday, wday)
# predict result
pred <- predict(model, newdata=test)
# insert the predicted result back to the test data set for plotting
test$pred <- pred
# format the data for ggplot
predPF <- test%>% group_by(hour) %>% summarize(crowd = sum(pred))
predPF <- data.frame(predPF)
# ggplot to plot the predicted crowd data
g <- ggplot(predPF, aes(x=hour, y=crowd))
g + geom_point(color="white") +
theme_bw() +
stat_smooth(colour="darkblue", size=2, se = FALSE) +
scale_x_continuous(limits=c(8,21), breaks=8:21, labels=c("8am", "9am", "10am", "11am", "12am", "1pm", "2pm", "3pm", "4pm", "5pm", "6pm", "7pm", "8pm", "9pm")) +
labs(x=c("Time of the day"), y=c("Crowd index"))
}
date <- "2015-10-2"
plotpredict(date, load(insRF.rda))
load(insRF.rda)
find("load")
file.info("insRF.rda") # Prints the file size etc...
readBin("insRF.rda", "raw", 50) # reads first 50 bytes from the file
attach("insRF.rda")
ls("file:insRF.rda")
plotpredict(date, insRF))
plotpredict(date, insRF)
shiny::runApp()
date <- "2015-8-1"
model <- attach(insRF.rda)
insRF.rda
